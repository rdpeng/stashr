
R Under development (unstable) (2019-09-11 r77169) -- "Unsuffered Consequences"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## Tests for Regression testing ##########################################
> ##########################################################################
> 
> suppressPackageStartupMessages(library(stashR))
> 
> wd <- getwd()
> dir <- file.path(wd,"testDir")
> 
> ##########################################################################
> ## Test objects of class 'remoteDB'
> ## These tests will fail (within a 'try()') if Internet connectivity
> ## is not available
> 
> ## myurl <- "http://www.biostat.jhsph.edu/MCAPS/data_v0.3/"
> 
> ## ## create a 'remoteDB' object ##
> ## db <- new("remoteDB", url= myurl, dir = dir, name= "MCAPS")
> ## show(db)
> ## show(class(db))
> ## show(db@url)
> ## show(db@dir)
> 
> 
> ## ## other prelim steps necessary ##
> ## ## dbCreate(db)
> 
> ## ## test the methods ##
> ## try( dbList(db) )
> ## x <- try( dbFetch(db, "01073") )
> ## str(x)
> 
> ## try( dbFetch(db, "01004") )
> ## try( dbDelete(db,"01073") )
> ## try( dbInsert(db,key = "01004", value = 1) )
> 
> ## try( dbSync(db) )
> ## dir(file.path(db@dir, "data"))
> 
> ## try( dbSync(db, key = "01073") )
> ## dir(file.path(db@dir, "data"))
> 
> ## try( dbSync(db, key = c("01004","01073")) )
> ## dir(file.path(db@dir, "data"))
> ## try( dbExists(db,c("01073", "01004","55079")) )
> 
> ## ## remove db@dir directory ##
> ## unlink(db@dir, recursive = TRUE)
> 
> ##########################################################################
> ## Test objects of class 'localDB'
> 
> wd <- getwd()
> dir <- file.path(wd,"testDir")
> 
> ## create a 'remoteDB' object ##
> dbLocal <- new("localDB", dir= dir, name= "MCAPS")
> show(dbLocal)
'localDB' database 'MCAPS'
> show(class(dbLocal))
[1] "localDB"
attr(,"package")
[1] "stashR"
> show(dbLocal@dir)
[1] "/home/marcle/src/R/stashr/tests/testDir"
> 
> ## test the methods  ##
> dbInsert(dbLocal,key = "01004", value = 1:10)
> dbList(dbLocal)
[1] "01004"
> dbInsert(dbLocal,key = "01005", value = rep(5,10))
> dbInsert(dbLocal,key = "01006", value = matrix(1,5,4))
> dbList(dbLocal)
[1] "01004" "01005" "01006"
> 
> reposVersion(dbLocal)
[1] 3
> reposVersion(dbLocal) <- 1
> dbList(dbLocal)
[1] "01004"
> try( dbFetch(dbLocal, "01005") )
> try( dbDelete(dbLocal, "01004") )
> try( dbInsert(dbLocal, "01005", 1))
> 
> reposVersion(dbLocal) <- -1
> dbList(dbLocal)
[1] "01004" "01005" "01006"
> dbFetch(dbLocal, "01005")
 [1] 5 5 5 5 5 5 5 5 5 5
> 
> dbFetch(dbLocal, "01004")  
 [1]  1  2  3  4  5  6  7  8  9 10
> try( dbFetch(dbLocal, "01073") )
> dbFetch(dbLocal, "01005")
 [1] 5 5 5 5 5 5 5 5 5 5
> dbDelete(dbLocal,"01004")
> dbList(dbLocal)	
[1] "01005" "01006"
> try( dbDelete(dbLocal,"01004") )
> dbDelete(dbLocal,"01005")
> dbList(dbLocal)
[1] "01006"
> dbExists(dbLocal,key="01004")
[1] FALSE
> dbExists(dbLocal,key="01006")
[1] TRUE
> 
> ## Weird object names
> dbInsert(dbLocal, "x.1", 1)
> dbInsert(dbLocal, "x.1", 2)
> dbInsert(dbLocal, "x.2", 3)
> dbInsert(dbLocal, "y.1.1.1", 4)
> 
> dbList(dbLocal)
[1] "01006"   "x.1"     "x.2"     "y.1.1.1"
> dbFetch(dbLocal, "x.2")
[1] 3
> 
> 
> dbUnlink(dbLocal)
> 
> ################################################################################
> ## Test MD5 digests
> 
> db <- new("localDB", dir = "testMD5", name = "testMD5")
> dbInsert(db, "obj", rnorm(100))
> 
> stopifnot(stashR:::validDataInternal(db, "obj"))
> 
> dbUnlink(db)
> 
